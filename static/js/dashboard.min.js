//  Modules
angular.module("DragonBoard",["ui.bootstrap","ui.router","ngCookies","chart.js"]);

function LineCtrl(e){e.options={scales:{yAxes:[{id:"y-axis-1",type:"linear",display:!0,position:"left"}]}}}angular.module("DragonBoard").controller("LineCtrl",["$scope",LineCtrl]);
function rdLoading(){var d={restrict:"AE",template:'<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'};return d}angular.module("DragonBoard").directive("rdLoading",rdLoading);
function rdWidgetBody(){var d={requires:"^rdWidget",scope:{loading:"=?",classes:"@?"},transclude:!0,template:'<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',restrict:"E"};return d}angular.module("DragonBoard").directive("rdWidgetBody",rdWidgetBody);
function rdWidgetFooter(){var r={requires:"^rdWidget",transclude:!0,template:'<div class="widget-footer" ng-transclude></div>',restrict:"E"};return r}angular.module("DragonBoard").directive("rdWidgetFooter",rdWidgetFooter);
function rdWidgetTitle(){var i={requires:"^rdWidget",scope:{title:"@",icon:"@"},transclude:!0,template:'<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-lg-6 col-xs-6 col-sm-6" ng-transclude></div></div></div>',restrict:"E"};return i}angular.module("DragonBoard").directive("rdWidgetHeader",rdWidgetTitle);


//  MasterCtrl
angular.module('DragonBoard')
    .controller('MasterCtrl', ['$scope', '$cookieStore', "$http", MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };
}


//  Workspace
angular.module("DragonBoard").directive("getWorkspace", GetWorkspace)

function GetWorkspace($rootScope, $http) {
    $http.get("/workspace").success(
        function (kv) {
            $rootScope.exec_py =  kv['exec_py'];
            $rootScope.log_dir =  kv['log_dir'];
        }
    )
}

// Route
angular.module('DragonBoard').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {
        // For unmatched routes
        $urlRouterProvider.otherwise('/');
        // Application routes
        $stateProvider
            .state('index', {
                url: '/events',
                templateUrl: 'templates/events.html'
            })
            .state('events', {
                url: '/events',
                templateUrl: 'templates/events.html'
            })
			;
    }
]);

// Widget
angular
    .module('DragonBoard')
    .directive('rdWidget', rdWidget)
    .directive('clickWidget', ClickWidget)

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {}
};

function ClickWidget() {
    var directive = {
        transclude: true,
        template: '<div class="click-widget" ng-click="onEventClick(item.name)">' +
                        '<div class="widget" ng-transclude></div>' +
                  '</div>',
        restrict: 'EA'
    };
    return directive;
};

//  EventCrtl
angular.module('DragonBoard')
    .controller('EventCtrl', ['$scope', '$cookieStore', '$state', '$http', EventCtrl]);
angular.module('DragonBoard').config(['ChartJsProvider', function (ChartJsProvider) {
    // Configure all charts
    ChartJsProvider.setOptions({
      chartColors: ['#FF5252', '#FF8A80'],
      animation: false
    });
}])

function EventCtrl($scope, $cookieStore, $state) {
    $scope.watch = $cookieStore.get('watch_event') ?
                $cookieStore.get('watch_event') : 'ScalarWatcher'
    $scope.scalars = []
    $scope.X = $cookieStore.get('X')
    $scope.Y = $cookieStore.get('Y')
    $scope.reload = function() { $state.reload(); }
    $scope.list_scalars = function() {
         $scope.scalars = []
         $.ajax({
            type : "post",
            url : "/events/list_scalars",
            data : "",
            async : false,
            success : function (scalars) {
                for (var key in scalars)
                   $scope.scalars.push({name: key, update_time: scalars[key]})
             }})
    }
    $scope.get_scalar = function(name){
        if (name == 'ScalarWacther') return
        $scope.X = []
        $scope.Y = [[]]
        $.ajax({
            type : "post",
            url : "/events/get_scalar",
            data : {'scalar': name},
            async : false,
            success : function (scalars) {
                for (var key in scalars){
                     $scope.X.push(key)
                     $scope.Y[0].push(scalars[key])
                }
                $cookieStore.put('X', $scope.X);
                $cookieStore.put('Y', $scope.Y);
            }
        })
    }
    $scope.list_scalars()
    $scope.get_scalar($scope.watch)
    $scope.onEventClick = function(name){
        $cookieStore.put('watch_event', name);
        $scope.reload();
    }
    $scope.autoRefresh = function(speed){
        if ($cookieStore.get('refresher'))
            window.clearInterval($cookieStore.get('refresher'))
        if (speed == 'Slow')
            $cookieStore.put('refresher', setInterval($scope.reload, 8000))
        else if (speed == 'Medium')
            $cookieStore.put('refresher', setInterval($scope.reload, 4000))
        else if (speed == 'Fast')
            $cookieStore.put('refresher', setInterval($scope.reload, 2000))
    }
}



